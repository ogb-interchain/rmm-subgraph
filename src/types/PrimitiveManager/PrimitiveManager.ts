// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Allocate extends ethereum.Event {
  get params(): Allocate__Params {
    return new Allocate__Params(this);
  }
}

export class Allocate__Params {
  _event: Allocate;

  constructor(event: Allocate) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get delLiquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get delRisky(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fromMargin(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get strike(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sigma(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get gamma(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get delLiquidity(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get risky(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get stable(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get delRisky(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Remove extends ethereum.Event {
  get params(): Remove__Params {
    return new Remove__Params(this);
  }
}

export class Remove__Params {
  _event: Remove;

  constructor(event: Remove) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get delLiquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get delRisky(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get riskyForStable(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get deltaIn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get deltaOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fromMargin(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get toMargin(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get engine(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get risky(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get stable(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get delRisky(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PrimitiveManager__marginsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PrimitiveManager__removeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PrimitiveManager extends ethereum.SmartContract {
  static bind(address: Address): PrimitiveManager {
    return new PrimitiveManager("PrimitiveManager", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WETH9(): Address {
    let result = super.call("WETH9", "WETH9():(address)", []);

    return result[0].toAddress();
  }

  try_WETH9(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH9", "WETH9():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  margins(param0: Address, param1: Address): PrimitiveManager__marginsResult {
    let result = super.call(
      "margins",
      "margins(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new PrimitiveManager__marginsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_margins(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<PrimitiveManager__marginsResult> {
    let result = super.tryCall(
      "margins",
      "margins(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimitiveManager__marginsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionDescriptor(): Address {
    let result = super.call(
      "positionDescriptor",
      "positionDescriptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionDescriptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionDescriptor",
      "positionDescriptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  remove(
    engine: Address,
    poolId: Bytes,
    delLiquidity: BigInt,
    minRiskyOut: BigInt,
    minStableOut: BigInt
  ): PrimitiveManager__removeResult {
    let result = super.call(
      "remove",
      "remove(address,bytes32,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(engine),
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(delLiquidity),
        ethereum.Value.fromUnsignedBigInt(minRiskyOut),
        ethereum.Value.fromUnsignedBigInt(minStableOut)
      ]
    );

    return new PrimitiveManager__removeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_remove(
    engine: Address,
    poolId: Bytes,
    delLiquidity: BigInt,
    minRiskyOut: BigInt,
    minStableOut: BigInt
  ): ethereum.CallResult<PrimitiveManager__removeResult> {
    let result = super.tryCall(
      "remove",
      "remove(address,bytes32,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(engine),
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(delLiquidity),
        ethereum.Value.fromUnsignedBigInt(minRiskyOut),
        ethereum.Value.fromUnsignedBigInt(minStableOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimitiveManager__removeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get factory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get WETH9_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get positionDescriptor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateCall extends ethereum.Call {
  get inputs(): AllocateCall__Inputs {
    return new AllocateCall__Inputs(this);
  }

  get outputs(): AllocateCall__Outputs {
    return new AllocateCall__Outputs(this);
  }
}

export class AllocateCall__Inputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get risky(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get stable(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get delRisky(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get fromMargin(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get minLiquidityOut(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AllocateCall__Outputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }

  get delLiquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AllocateCallbackCall extends ethereum.Call {
  get inputs(): AllocateCallbackCall__Inputs {
    return new AllocateCallbackCall__Inputs(this);
  }

  get outputs(): AllocateCallbackCall__Outputs {
    return new AllocateCallbackCall__Outputs(this);
  }
}

export class AllocateCallbackCall__Inputs {
  _call: AllocateCallbackCall;

  constructor(call: AllocateCallbackCall) {
    this._call = call;
  }

  get delRisky(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AllocateCallbackCall__Outputs {
  _call: AllocateCallbackCall;

  constructor(call: AllocateCallbackCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get risky(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get strike(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sigma(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get gamma(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get riskyPerLp(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get delLiquidity(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get delRisky(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CreateCallbackCall extends ethereum.Call {
  get inputs(): CreateCallbackCall__Inputs {
    return new CreateCallbackCall__Inputs(this);
  }

  get outputs(): CreateCallbackCall__Outputs {
    return new CreateCallbackCall__Outputs(this);
  }
}

export class CreateCallbackCall__Inputs {
  _call: CreateCallbackCall;

  constructor(call: CreateCallbackCall) {
    this._call = call;
  }

  get delRisky(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateCallbackCall__Outputs {
  _call: CreateCallbackCall;

  constructor(call: CreateCallbackCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get risky(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get delRisky(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCallbackCall extends ethereum.Call {
  get inputs(): DepositCallbackCall__Inputs {
    return new DepositCallbackCall__Inputs(this);
  }

  get outputs(): DepositCallbackCall__Outputs {
    return new DepositCallbackCall__Outputs(this);
  }
}

export class DepositCallbackCall__Inputs {
  _call: DepositCallbackCall;

  constructor(call: DepositCallbackCall) {
    this._call = call;
  }

  get delRisky(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DepositCallbackCall__Outputs {
  _call: DepositCallbackCall;

  constructor(call: DepositCallbackCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RefundETHCall extends ethereum.Call {
  get inputs(): RefundETHCall__Inputs {
    return new RefundETHCall__Inputs(this);
  }

  get outputs(): RefundETHCall__Outputs {
    return new RefundETHCall__Outputs(this);
  }
}

export class RefundETHCall__Inputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RefundETHCall__Outputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get engine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get delLiquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minRiskyOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minStableOut(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get delRisky(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SelfPermitCall extends ethereum.Call {
  get inputs(): SelfPermitCall__Inputs {
    return new SelfPermitCall__Inputs(this);
  }

  get outputs(): SelfPermitCall__Outputs {
    return new SelfPermitCall__Outputs(this);
  }
}

export class SelfPermitCall__Inputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitCall__Outputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }
}

export class SelfPermitAllowedCall extends ethereum.Call {
  get inputs(): SelfPermitAllowedCall__Inputs {
    return new SelfPermitAllowedCall__Inputs(this);
  }

  get outputs(): SelfPermitAllowedCall__Outputs {
    return new SelfPermitAllowedCall__Outputs(this);
  }
}

export class SelfPermitAllowedCall__Inputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitAllowedCall__Outputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }
}

export class SelfPermitAllowedIfNecessaryCall extends ethereum.Call {
  get inputs(): SelfPermitAllowedIfNecessaryCall__Inputs {
    return new SelfPermitAllowedIfNecessaryCall__Inputs(this);
  }

  get outputs(): SelfPermitAllowedIfNecessaryCall__Outputs {
    return new SelfPermitAllowedIfNecessaryCall__Outputs(this);
  }
}

export class SelfPermitAllowedIfNecessaryCall__Inputs {
  _call: SelfPermitAllowedIfNecessaryCall;

  constructor(call: SelfPermitAllowedIfNecessaryCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitAllowedIfNecessaryCall__Outputs {
  _call: SelfPermitAllowedIfNecessaryCall;

  constructor(call: SelfPermitAllowedIfNecessaryCall) {
    this._call = call;
  }
}

export class SelfPermitIfNecessaryCall extends ethereum.Call {
  get inputs(): SelfPermitIfNecessaryCall__Inputs {
    return new SelfPermitIfNecessaryCall__Inputs(this);
  }

  get outputs(): SelfPermitIfNecessaryCall__Outputs {
    return new SelfPermitIfNecessaryCall__Outputs(this);
  }
}

export class SelfPermitIfNecessaryCall__Inputs {
  _call: SelfPermitIfNecessaryCall;

  constructor(call: SelfPermitIfNecessaryCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitIfNecessaryCall__Outputs {
  _call: SelfPermitIfNecessaryCall;

  constructor(call: SelfPermitIfNecessaryCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get params(): SwapCallParamsStruct {
    return changetype<SwapCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapCallParamsStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get risky(): Address {
    return this[1].toAddress();
  }

  get stable(): Address {
    return this[2].toAddress();
  }

  get poolId(): Bytes {
    return this[3].toBytes();
  }

  get riskyForStable(): boolean {
    return this[4].toBoolean();
  }

  get deltaIn(): BigInt {
    return this[5].toBigInt();
  }

  get deltaOut(): BigInt {
    return this[6].toBigInt();
  }

  get fromMargin(): boolean {
    return this[7].toBoolean();
  }

  get toMargin(): boolean {
    return this[8].toBoolean();
  }

  get deadline(): BigInt {
    return this[9].toBigInt();
  }
}

export class SwapCallbackCall extends ethereum.Call {
  get inputs(): SwapCallbackCall__Inputs {
    return new SwapCallbackCall__Inputs(this);
  }

  get outputs(): SwapCallbackCall__Outputs {
    return new SwapCallbackCall__Outputs(this);
  }
}

export class SwapCallbackCall__Inputs {
  _call: SwapCallbackCall;

  constructor(call: SwapCallbackCall) {
    this._call = call;
  }

  get delRisky(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapCallbackCall__Outputs {
  _call: SwapCallbackCall;

  constructor(call: SwapCallbackCall) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get amountMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get engine(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get delRisky(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get delStable(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WrapCall extends ethereum.Call {
  get inputs(): WrapCall__Inputs {
    return new WrapCall__Inputs(this);
  }

  get outputs(): WrapCall__Outputs {
    return new WrapCall__Outputs(this);
  }
}

export class WrapCall__Inputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WrapCall__Outputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }
}
